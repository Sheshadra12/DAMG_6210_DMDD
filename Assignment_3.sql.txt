set serveroutput on;

--create game table
CREATE TABLE tictactoe(
      y NUMBER,
      A CHAR,
      B CHAR,
      C CHAR
    );

-- print the current game
CREATE OR REPLACE PROCEDURE print_current_game IS
BEGIN
  dbms_output.enable(10000);
  dbms_output.put_line(' ');
  FOR ll in (SELECT * FROM tictactoe ORDER BY Y) LOOP
    dbms_output.put_line('     ' || ll.A || ' ' || ll.B || ' ' || ll.C);
  END LOOP; 
  dbms_output.put_line(' ');
END;
/
-- convert column number to name
CREATE OR REPLACE FUNCTION colname_from_numb(numb IN NUMBER)
RETURN CHAR
IS
BEGIN
  IF numb=1 THEN
    RETURN 'A';
  ELSIF numb=2 THEN
    RETURN 'B';
  ELSIF numb=3 THEN
    RETURN 'C';
  ELSE 
    RETURN '_';
  END IF;
END;
/

-- reset game table
CREATE OR REPLACE PROCEDURE ourgame_restart IS
exp NUMBER;
BEGIN
  DELETE FROM tictactoe;
  FOR exp in 1..3 LOOP
    INSERT INTO tictactoe VALUES (exp,'_','_','_');
  END LOOP; 
  dbms_output.enable(10000);
  print_current_game();
  dbms_output.put_line('Game ready ');
END;
/

CREATE OR REPLACE PROCEDURE play(p_symb IN VARCHAR2, numb_column IN NUMBER, ligne IN NUMBER) IS
val tictactoe.a%type;
colmn CHAR;
p_symb2 CHAR;

BEGIN
 
  SELECT colname_from_numb(numb_column) INTO colmn FROM DUAL;
  EXECUTE IMMEDIATE ('SELECT ' || colmn || ' FROM tictactoe WHERE y=' || ligne) INTO val;
  IF val='_' THEN
    EXECUTE IMMEDIATE ('UPDATE tictactoe SET ' || colmn || '=''' || p_symb || ''' WHERE y=' || ligne);
    IF p_symb='X' THEN
      p_symb2:='O';
    ELSE
      p_symb2:='X';
    END IF;
    print_current_game();
    dbms_output.put_line('turn belongs to: ' || p_symb2 || '');
  ELSE
    dbms_output.enable(10000);
    dbms_output.put_line('position already occupied');
  END IF;
END;
/

--printing winner and reset new game
CREATE OR REPLACE PROCEDURE winner(p_symb IN VARCHAR2) IS
BEGIN
  dbms_output.enable(10000);
  print_current_game();
  dbms_output.put_line('the player  ' || p_symb || ' has won the game'); 
  dbms_output.put_line('---------------------------------------');
  dbms_output.put_line('New game about to start');
  ourgame_restart();
END;
/
-- print the current game
CREATE OR REPLACE PROCEDURE print_current_game IS
BEGIN
  dbms_output.enable(10000);
  dbms_output.put_line(' ');
  FOR ll in (SELECT * FROM tictactoe ORDER BY Y) LOOP
    dbms_output.put_line('     ' || ll.A || ' ' || ll.B || ' ' || ll.C);
  END LOOP; 
  dbms_output.put_line(' ');
END;
/
CREATE OR REPLACE FUNCTION sub_col_win(colm_numb IN VARCHAR2, p_symb IN VARCHAR2)
RETURN VARCHAR2
IS
BEGIN
  RETURN ('SELECT COUNT(*) FROM tictactoe WHERE ' || colm_numb || ' = '''|| p_symb ||''' AND ' || colm_numb || ' != ''_''');
END;
/

CREATE OR REPLACE FUNCTION sub_cross_win(colm_numb IN VARCHAR2, yvalue IN NUMBER)
RETURN VARCHAR2
IS
BEGIN
  RETURN ('SELECT '|| colm_numb ||' FROM tictactoe WHERE y=' || yvalue);
END;
/

CREATE OR REPLACE FUNCTION wincol(colm_numb IN VARCHAR2)
RETURN CHAR
IS
  nbwin NUMBER;
  r VARCHAR2(100);
BEGIN
  SELECT sub_col_win(colm_numb, 'X') into r FROM DUAL;
  EXECUTE IMMEDIATE r INTO nbwin;
  IF nbwin=3 THEN
    RETURN 'X';
  ELSIF nbwin=0 THEN
    SELECT sub_col_win(colm_numb, 'O') into r FROM DUAL;
    EXECUTE IMMEDIATE r INTO nbwin;
    IF nbwin=3 THEN
      RETURN 'O';
    END IF;
  END IF;
  RETURN '_';
END;
/

CREATE OR REPLACE FUNCTION wincross(tmpx IN CHAR, numcol IN NUMBER, numligne IN NUMBER)
RETURN CHAR
IS
  tmpvar CHAR;
  x_temp_var CHAR;
  r VARCHAR2(100);
BEGIN
  SELECT sub_cross_win(colname_from_numb(numcol), numligne) INTO r FROM DUAL;
  IF tmpx IS NULL THEN
    EXECUTE IMMEDIATE (r) INTO x_temp_var;
  ELSIF NOT tmpx = '_' THEN
    EXECUTE IMMEDIATE (r) INTO tmpvar;
    IF NOT tmpx = tmpvar THEN
      x_temp_var := '_';
    END IF;
  ELSE
    x_temp_var := '_';
  END IF;
  RETURN x_temp_var;
END;
/

CREATE OR REPLACE TRIGGER iswinner
AFTER UPDATE ON tictactoe
DECLARE
  CURSOR cr_ligne IS 
    SELECT * FROM tictactoe ORDER BY Y; 
  crlv tictactoe%rowtype;
  tmpvar CHAR;
  tmpx1 CHAR;
  tmpx2 CHAR;
  r VARCHAR2(100);
BEGIN
  FOR crlv IN cr_ligne LOOP

    IF crlv.A = crlv.B AND crlv.B = crlv.C AND NOT crlv.A='_' THEN
      winner(crlv.A);
      EXIT;
    END IF;
    SELECT wincol(colname_from_numb(crlv.Y)) INTO tmpvar FROM DUAL;
    IF NOT tmpvar = '_' THEN
      winner(tmpvar);
      EXIT;
    END IF;

    SELECT wincross(tmpx1, crlv.Y, crlv.Y) INTO tmpx1 FROM dual;
    SELECT wincross(tmpx2, 4-crlv.Y, crlv.Y) INTO tmpx2 FROM dual;
  END LOOP;
  IF NOT tmpx1 = '_' THEN
    winner(tmpx1);
  END IF;
  IF NOT tmpx2 = '_' THEN
    winner(tmpx2);
  END IF;
END;
/

execute ourgame_restart;
execute play('X',1,1);
execute play('O',1,2);
execute play('X',2,2);
execute play('O',1,3);
execute play('X',3,3);
execute play('X',2,1);
execute play('O',2,3);
execute play('X',1,3);
execute play('O',3,3);
execute play('X',1,1);
execute play('O',1,2);
execute play('X',3,1);
execute play('X',1,1);
execute play('O',1,1);

execute ourgame_restart;
